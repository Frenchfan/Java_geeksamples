package org.example;

import java.util.Arrays;
import java.util.Date;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        System.out.println("Hello world!");
        printEnterName();
        getTimeHello();
        int[] arr = {1, 1, 1, 1, 0, 1, 1, 1};
        System.out.println(countNumberOne(arr));
        int[] arr2 = {3, 2, 2, 3};
        System.out.println(Arrays.toString(pushThreeToEnd(arr2, 4)));
        int[] arr3 = {3, 2, 3, 2};
        System.out.println(Arrays.toString(arrChangetoEnd(arr3)));
        longestCommonPrefix();
        stringRevers();
        stringRevers2();
    }

    /**
     *  –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ <–ò–º—è> –≤ –∫–æ–Ω—Å–æ–ª–∏.
     *  –ü–æ–ª—É—á–∏—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –≤—ã–≤–µ–¥–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äú–ü—Ä–∏–≤–µ—Ç, <–ò–º—è>!‚Äù
     */
    public static void  printEnterName() {
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ");
        Scanner scanner = new Scanner((System.in));
        String name = scanner.nextLine();
        System.out.println("–ü—Ä–∏–≤–µ—Ç, " + name);
    }

    /**
     * üìî –í –∫–æ–Ω—Å–æ–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∏–¥–∞
     * "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, <–ò–º—è>!", –µ—Å–ª–∏ –≤—Ä–µ–º—è –æ—Ç 05:00 –¥–æ 11:59
     * "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, <–ò–º—è>!", –µ—Å–ª–∏ –≤—Ä–µ–º—è –æ—Ç 12:00 –¥–æ 17:59;
     * "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, <–ò–º—è>!", –µ—Å–ª–∏ –≤—Ä–µ–º—è –æ—Ç 18:00 –¥–æ 22:59;
     * "–î–æ–±—Ä–æ–π –Ω–æ—á–∏, <–ò–º—è>!", –µ—Å–ª–∏ –≤—Ä–µ–º—è –æ—Ç 23:00 –¥–æ 4:59
     * </aside>
     */
    public static void getTimeHello() {
        Date today = new Date();
        double curHr = today.getHours();

        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ");
        Scanner enterName = new Scanner(System.in);
        String name = enterName.nextLine();

        if (curHr > 5 && curHr < 11.59) {
            System.out.println("–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, " + name + "!");
        } else if (curHr > 12 && curHr < 17.59) {
            System.out.println("–î–æ–±—Ä—ã–π –¥–µ–Ω—å, " + name + "!");
        } else if (curHr > 18 && curHr < 22.59) {
            System.out.println("–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, " + name + "!");
        } else {
            System.out.println("–î–æ–±—Ä–æ–π –Ω–æ—á–∏, " + name + "!");
        }
    }

    /**
     * –î–∞–Ω –º–∞—Å—Å–∏–≤ –¥–≤–æ–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä [1,1,0,1,1,1],
     * –≤—ã–≤–µ—Å—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö 1.
     */
    public static int countNumberOne(int[] arr) {
        int count = 0;
        int max = 0;

        for (int elem : arr) {
            if (elem == 0) {
                count = 0;
            } else {
                count++;
            }
            if (max <= count) max = count;
        }
        return max;
    }

    /**
     * –î–∞–Ω –º–∞—Å—Å–∏–≤ nums = [3,2,2,3] –∏ —á–∏—Å–ª–æ val = 3.
     * –ï—Å–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ –µ—Å—Ç—å —á–∏—Å–ª–∞, —Ä–∞–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–Ω–æ–º—É, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —ç—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞.
     * –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ (–∏–ª–∏ –≤—Å–µ) —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–ª–∏—á–Ω—ã –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–≥–æ
     * , –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ - —Ä–∞–≤–Ω—ã –µ–º—É.
     */
    public static int[] pushThreeToEnd(int[] arr, int length) {
        int count = 0;

        for (int i = 0; i < length; i++) {
            if (arr[i] != 3) {
                arr[count++] = arr[i];
            }
        }
        while (count < length) {
            arr[count++] = 3;
        }
        return arr;
    }

    public static int[] arrChangetoEnd(int[] arr) {
        int val = 3;
        int buffer = 0;
        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] == val) {
                buffer = arr[i];
                arr[i] = arr[i+1];
                arr[i+1] = buffer;
            }
        }
        return arr;
    }

    /**
     * –ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –æ–±—â–µ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞ —Å—Ä–µ–¥–∏ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫.
     * –ï—Å–ª–∏ –æ–±—â–µ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –Ω–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É "".
     */
    public static void longestCommonPrefix() {
        String[] str = {"disappear", "disarm", "disconnect "};
        if (str.length == 0) {
            System.out.println("–ù–µ—Ç –æ–±—â–µ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞!");
        }
        String prefix = str[0];

        for (int i = 1; i < str.length; i++) {
            while (str[i].indexOf(prefix) != 0) {
                prefix = prefix.substring(0, prefix.length() - 1);
            }
        }
        System.out.println(prefix);
    }

    /**
     * –í–æ —Ñ—Ä–∞–∑–µ "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫—É—Ä—Å –ø–æ Java" –ø–µ—Ä–µ—Å—Ç–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
     */
    public static void stringRevers() {
        String str = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫—É—Ä—Å –ø–æ Java";

        String result = new StringBuilder(str).reverse().toString();

        System.out.println(result);
    }

    public static void stringRevers2() {
        String[] str = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫—É—Ä—Å –ø–æ Java".split("\\s");
        String rev = "";
        for (int i = str.length - 1; i >= 0; i--) {
            rev = rev + str[i] + " ";
        }
        System.out.println(rev);
    }
}

